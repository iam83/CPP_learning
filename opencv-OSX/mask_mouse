#include "opencv2/imgproc.hpp"
#include "opencv2/imgcodecs.hpp"
#include "opencv2/highgui.hpp"
#include <iostream>


using namespace std;
using namespace cv;

Mat src, img1, mask, final;

Point point;

vector<Point> pts;
int drag = 0;
int var = 0;
int flag = 0;

void mouseHandler(int, int, int, int, void*);
void mouseHandler(int event, int x, int y, int, void*)
{
    if (event == EVENT_LBUTTONDOWN && !drag)
    {
        if (flag == 0)
        {
            if (var == 0)
                img1 = src.clone();
            point = Point(x, y);
            circle(img1, point, 2, Scalar(0, 0, 255), -1, 8, 0);
            pts.push_back(point);
            var++;
            drag  = 1;
            if (var > 1)
                line(img1,pts[var-2], point, Scalar(0, 0, 255), 2, 8, 0);
            imshow("Source", img1);
        }
    }
    if (event == EVENT_LBUTTONUP && drag)
    {
        imshow("Source", img1);
        drag = 0;
    }
    if (event == EVENT_RBUTTONDOWN)
    {
        flag = 1;
        img1 = src.clone();
        if (var != 0)
        {
            polylines( img1, pts, 1, Scalar(0,0,0), 2, 8, 0);
        }
        imshow("Source", img1);
    }
    if (event == EVENT_RBUTTONUP)
    {
        flag = var;
        final = Mat::zeros(src.size(), CV_8UC3);
        mask = Mat::zeros(src.size(), CV_8UC1);
        fillPoly(mask, pts, Scalar(255, 255, 255), 8, 0);
        bitwise_and(src, src, final, mask);
        imshow("Mask", mask);
        imshow("Result", final);
        imshow("Source", img1);
    }
    if (event == EVENT_MBUTTONDOWN)
    {
        pts.clear();
        var = 0;
        drag = 0;
        flag = 0;
        imshow("Source", src);
    }
}
int main(int argc, char **argv)
{
    //CommandLineParser parser(argc, argv, "{@input | lena.jpg | input image}");

    cout << "\n\tleft mouse button - set a point to create mask shape\n"
        "\tright mouse button - create mask from points\n"
        "\tmiddle mouse button - reset\n";

    String input_image = "/Users/anton/Desktop/test.jpg";

    src = imread(samples::findFile(input_image));
    if (src.empty())
    {
        printf("Error opening image: %s\n", input_image.c_str());
        return 0;
    }

    namedWindow("Source", WINDOW_AUTOSIZE);
    setMouseCallback("Source", mouseHandler, NULL);
    imshow("Source", src);
    waitKey(0);
    return 0;
}









// void camera_in()
// {
//     VideoCapture cap;
//     cap.open(0, CAP_AVFOUNDATION);

//     if (!cap.isOpened())
//     {
//         cerr << "Camera open failed!" << endl;
//         return;
//     }

//     cout << "Frame width: " << cvRound(cap.get(CAP_PROP_FRAME_WIDTH)) << endl;
//     cout << "Frame height: " << cvRound(cap.get(CAP_PROP_FRAME_HEIGHT)) << endl;

//     Mat frame, inversed;

//     while (true)
//     {
//         cap >> frame;
//         if (frame.empty())
//             break;

//         //inversed = ~frame;

//         imshow("frame", frame);
//         //imshow("inversed", inversed);
        
//         if (waitKey(10) == 27)
//             break;
//     }
//     destroyAllWindows();
// }

// int main()
// {
//     camera_in();
// }